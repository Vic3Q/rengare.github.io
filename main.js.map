{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/group-list/group-list.component.html","webpack:///./src/app/group-list/group-list.component.scss","webpack:///./src/app/group-list/group-list.component.ts","webpack:///./src/app/list/incident-list/incident-list.component.html","webpack:///./src/app/list/incident-list/incident-list.component.scss","webpack:///./src/app/list/incident-list/incident-list.component.ts","webpack:///./src/app/list/list.component.html","webpack:///./src/app/list/list.component.scss","webpack:///./src/app/list/list.component.ts","webpack:///./src/app/list/priority.ts","webpack:///./src/app/list/problem-list/problem-list.component.html","webpack:///./src/app/list/problem-list/problem-list.component.scss","webpack:///./src/app/list/problem-list/problem-list.component.ts","webpack:///./src/app/list/problem-transformation.ts","webpack:///./src/app/list/queries.ts","webpack:///./src/app/shared/counter/counter.component.ts","webpack:///./src/app/shared/counter/time.pipe.ts","webpack:///./src/app/shared/csv-parser.ts","webpack:///./src/app/shared/grid/grid.component.html","webpack:///./src/app/shared/grid/grid.component.scss","webpack:///./src/app/shared/grid/grid.component.ts","webpack:///./src/app/shared/group.model.ts","webpack:///./src/app/shared/notification.service.ts","webpack:///./src/app/shared/shared.module.ts","webpack:///./src/app/shared/snow.service.ts","webpack:///./src/environments/environment.prod.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<button class=\\\"btn btn-elegant\\\" (click)=\\\"test('assets/users.csv')\\\">Test</button>\\n\\n<ng-container *ngIf=\\\"logged && !loading\\\">\\n\\n  <ng-container *ngIf=\\\"!chosenGroup\\\">\\n    <h1>Choose group</h1>\\n    <app-group-list (groupSelected)=\\\"chooseGroup($event)\\\"></app-group-list>\\n\\n    <!-- <button (click)=\\\"chooseGroup('11111')\\\" class=\\\"btn btn-elegant\\\">Mock group</button> -->\\n  </ng-container>\\n\\n\\n\\n  <ng-container *ngIf=\\\"chosenGroup\\\">\\n    <h1>Group: {{ chosenGroup.name }}</h1>\\n    <button (click)=\\\"back()\\\" class=\\\"btn btn-elegant\\\">Back to group list</button>\\n\\n    <app-list [selectedGroup]=\\\"chosenGroup\\\"></app-list>\\n  </ng-container>\\n\\n</ng-container>\\n\\n\\n<div class=\\\"loader-container\\\" *ngIf=\\\"loading\\\">\\n    <div class=\\\"loader\\\"></div>\\n</div>\\n\"","module.exports = \"\"","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { SnowService } from '@app/shared/snow.service';\nimport { NotificationService } from '@app/shared/notification.service';\nimport { Observable, Subject } from 'rxjs';\nimport { GroupModel, getGroups } from '@app/shared/group.model';\nimport { User, UserGroup } from '@app/shared/user.model';\nimport { ReadCSV } from '@app/shared/csv-parser';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n\n  PASS = \")@!#\";\n\n  chosenGroup: GroupModel = undefined;\n  logged: boolean = false;\n  loading: boolean = true;\n\n  constructor(\n    private notificationService: NotificationService,\n    private snowService: SnowService\n  ) {\n\n  }\n\n  ngOnInit(): void {\n    this.notificationService.requestPermission();\n\n    let p = localStorage.getItem(\"p\");\n    if (p !== this.PASS) {\n      this.login();\n    } else {\n      this.logged = true;\n      this.getUsersByGroup();\n    }\n\n  }\n\n  async test(url) {\n    console.log();\n  }\n\n  chooseGroup(group: GroupModel) {\n    this.chosenGroup = group;\n  }\n\n  back() {\n    this.chosenGroup = undefined;\n  }\n\n  login() {\n    let pass = prompt(\"pass\", \"\");\n    if (pass == this.PASS) {\n      this.logged = true;\n      localStorage.setItem('p', pass);\n    }\n  }\n\n  getUsersByGroup() {\n    this.snowService.getUsersByGroups(this.getQueryFromUserGroup())\n      .subscribe(\n        resp => {\n          this.snowService.users = resp;\n          this.usersLoaded();\n        },\n        error => this.usersLoaded()\n      );\n  }\n\n  private getQueryFromUserGroup() {\n    let query: string = '';\n    getGroups().forEach(group => {\n      query += `${group.id},`\n    })\n    return query;\n  }\n\n  usersLoaded() {\n    this.loading = false;\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { MDBBootstrapModule } from 'angular-bootstrap-md';\n\nimport { SharedModule } from '@app/shared/shared.module';\nimport { AppComponent } from './app.component';\nimport { ListComponent } from './list/list.component';\nimport { GroupListComponent } from './group-list/group-list.component';\nimport { IncidentListComponent } from './list/incident-list/incident-list.component';\nimport { ProblemListComponent } from './list/problem-list/problem-list.component';\nimport { SnowService } from '@app/shared/snow.service';\nimport { NotificationService } from '@app/shared/notification.service';\nimport { GridComponent } from '@app/shared/grid/grid.component';\nimport { CounterComponent } from '@app/shared/counter/counter.component';\nimport { TimePipe } from '@app/shared/counter/time.pipe';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ListComponent,\n    GroupListComponent,\n    IncidentListComponent,\n    ProblemListComponent,\n  ],\n  imports: [\n    CommonModule,\n    MDBBootstrapModule.forRoot(),\n    BrowserModule,\n    SharedModule\n  ],\n  providers: [\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"<div class=\\\"row\\\">\\n\\n    <div class=\\\"col-md-3\\\" *ngFor=\\\"let group of groups\\\">\\n\\n        <div class=\\\"card\\\">\\n            <div class=\\\"card-body\\\">\\n                <p>\\n                    {{ group.name }}\\n                </p>\\n                <button class=\\\"btn btn-elegant\\\" (click)=\\\"groupSelected.next(group)\\\">enter</button>\\n            </div>\\n        </div>\\n\\n    </div>\\n</div>\"","module.exports = \"\"","import { Component, OnInit, EventEmitter, Output } from '@angular/core';\nimport { GroupModel, getGroups } from '@app/shared/group.model';\nimport { Subject } from 'rxjs';\n\n@Component({\n  selector: 'app-group-list',\n  templateUrl: './group-list.component.html',\n  styleUrls: ['./group-list.component.scss']\n})\nexport class GroupListComponent implements OnInit {\n\n  @Output() groupSelected: EventEmitter<GroupModel> = new EventEmitter();\n\n  groups: GroupModel[] = getGroups();\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<ng-container *ngIf=\\\"data\\\">\\n    <app-grid\\n    [selectedGroup]=\\\"selectedGroup\\\"\\n    [data]=\\\"data\\\"\\n    [columns]=\\\"columns\\\"\\n    [queryField]=\\\"'dv_short_description'\\\"\\n    [title]=\\\"title\\\"\\n    >\\n    </app-grid>\\n</ng-container>\\n\\n<div class=\\\"\\\" *ngIf=\\\"loading\\\">\\n    <div class=\\\"loader\\\"></div>\\n</div>\\n\"","module.exports = \"\"","import { Component, OnInit, Input } from '@angular/core';\nimport { SnowService } from '@app/shared/snow.service';\nimport { NotificationService } from '@app/shared/notification.service';\nimport { GroupModel } from '@app/shared/group.model';\nimport { ProblemModel } from '@app/shared/swiss-response.model';\n\n@Component({\n  selector: 'app-incident-list',\n  templateUrl: './incident-list.component.html',\n  styleUrls: ['./incident-list.component.scss']\n})\nexport class IncidentListComponent implements OnInit {\n  @Input() selectedGroup: GroupModel;\n  @Input() url: string = '';\n  @Input() title: string = '';\n\n\n  problemList: ProblemModel[];\n  columns: any[];\n  data: any[];\n  loading: boolean = true;\n\n  constructor(\n    private snowService: SnowService,\n    private notificationService: NotificationService,\n  ) { }\n\n  ngOnInit() {\n    this.columns = [\n      {\n        name: 'Issue nr',\n        prop: 'dv_number',\n        template: 'id'\n      },\n      {\n        name: 'Priority',\n        prop: 'dv_priority'\n      },\n      {\n        prop: 'dv_incident_state',\n        name: 'Status'\n      },\n      {\n        prop: 'sys_created_on',\n        name: 'Opened at'\n      },\n      {\n        prop: 'dv_sys_updated_on',\n        name: 'Updated at'\n      },\n      {\n        prop: 'dv_short_description',\n        name: 'Short description'\n      },\n      {\n        prop: 'user.email',\n        name: 'Assigned to',\n        template: 'user'\n      },\n      {\n        prop: 'counter',\n        name: 'counter',\n        template: 'timer'\n      },\n    ];\n\n    this.getIncidents();\n  }\n\n\n  getIncidents() {\n    this.snowService.getIncidents(this.selectedGroup.id, this.url)\n      .subscribe(\n        resp => {\n          this.data = resp;\n          this.loading = false;\n        },\n        error => this.loading = false\n      )\n  }\n\n}\n","module.exports = \"<div class=\\\"col-md-12\\\">\\n    <ng-container *ngFor=\\\"let incident of incidents\\\">\\n        <app-incident-list [selectedGroup]=\\\"selectedGroup\\\" [url]=\\\"incident.url\\\" [title]=\\\"incident.title\\\"></app-incident-list>\\n    </ng-container>\\n\\n    <ng-container *ngFor=\\\"let problem of problems\\\">\\n        <app-problem-list [selectedGroup]=\\\"selectedGroup\\\" [url]=\\\"problem.url\\\" [title]=\\\"problem.title\\\">\\n        </app-problem-list>\\n    </ng-container>\\n</div>\\n\"","module.exports = \".list-container {\\n  padding-left: 20px;\\n  padding-right: 20px; }\\n\"","import { Component, OnInit, Input, ViewChild, TemplateRef } from '@angular/core';\nimport { SnowService } from '@app/shared/snow.service';\nimport { SwissResponseModel, ProblemModel } from '@app/shared/swiss-response.model';\nimport { Observable } from 'rxjs';\nimport { NotificationService } from '@app/shared/notification.service';\nimport { GroupModel } from '@app/shared/group.model';\nimport { DatatableComponent } from '@swimlane/ngx-datatable';\nimport { IncidentQueries } from '@app/list/queries';\n\nexport class TaskListModel {\n  url: string;\n  title: string;\n}\n\n@Component({\n  selector: 'app-list',\n  templateUrl: './list.component.html',\n  styleUrls: ['./list.component.scss']\n})\nexport class ListComponent implements OnInit {\n  @Input() selectedGroup: GroupModel;\n\n  incidents: TaskListModel[] = [];\n  problems: TaskListModel[] = [];\n\n  constructor(\n  ) {\n  }\n\n  ngOnInit() {\n    this.incidents = [\n      {\n        url: IncidentQueries.incident_list_unassigned(this.selectedGroup.id),\n        title: 'Unassigned incidents'\n      },\n      {\n        url: IncidentQueries.incident_list(this.selectedGroup.id),\n        title: 'All incidents'\n      }\n    ];\n\n    this.problems = [\n      {\n        url: '',\n        title: 'Problem list'\n      }\n    ]\n  }\n\n  // notify() {\n  //   this.notificationService.notify('test from guardian', 'helloooooooooooooo');\n  // }\n}\n","export class Priority {\n  label: string;\n  officeTime: ActionTime\n  onCall: ActionTime;\n}\n\nexport class ActionTime {\n  reactionTime: number;\n  resolutionTime: number;\n}\n\nexport const PRIORITIES: Priority[] = [\n  {\n    label: 'Standard',\n    officeTime: {\n      reactionTime: 1 * 60 * 60,\n      resolutionTime: 24 * 60 * 60\n    },\n    onCall: {\n      reactionTime: 24 * 60 * 60,\n      resolutionTime: 24 * 60 * 60\n    }\n  },\n  {\n    label: 'Medium',\n    officeTime: {\n      reactionTime: 1 * 45 * 60,\n      resolutionTime: 4 * 60 * 60\n    },\n    onCall: {\n      reactionTime: 24 * 60 * 60,\n      resolutionTime: 1.5 * 60 * 60\n    }\n  },\n  {\n    label: 'High',\n    officeTime: {\n      reactionTime: 1 * 30 * 60,\n      resolutionTime: 1.5 * 60 * 60\n    },\n    onCall: {\n      reactionTime: 1 * 60 * 60,\n      resolutionTime: 1.5 * 60 * 60\n    }\n  },\n  {\n    label: 'Critical',\n    officeTime: {\n      reactionTime: 1 * 15 * 60,\n      resolutionTime: 1 * 60 * 60\n    },\n    onCall: {\n      reactionTime: 1 * 60 * 60,\n      resolutionTime: 1 * 60 * 60\n    }\n  }\n]\n","module.exports = \"<ng-container *ngIf=\\\"data\\\">\\n  <app-grid\\n  [selectedGroup]=\\\"selectedGroup\\\"\\n  [data]=\\\"data\\\"\\n  [columns]=\\\"columns\\\"\\n  [queryField]=\\\"'dv_short_description'\\\"\\n  [title]=\\\"title\\\"\\n  >\\n  </app-grid>\\n</ng-container>\\n\\n<div class=\\\"\\\" *ngIf=\\\"loading\\\">\\n    <div class=\\\"loader\\\"></div>\\n</div>\\n\"","module.exports = \"\"","import { Component, OnInit, ViewChild, TemplateRef, Input } from '@angular/core';\nimport { ProblemModel } from '@app/shared/swiss-response.model';\nimport { DatatableComponent } from '@swimlane/ngx-datatable';\nimport { SnowService } from '@app/shared/snow.service';\nimport { NotificationService } from '@app/shared/notification.service';\nimport { Observable, interval } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { GroupModel } from '@app/shared/group.model';\nimport { environment } from '@environments/environment.prod';\n\n@Component({\n  selector: 'app-problem-list',\n  templateUrl: './problem-list.component.html',\n  styleUrls: ['./problem-list.component.scss']\n})\nexport class ProblemListComponent implements OnInit {\n  @Input() selectedGroup: GroupModel;\n  @Input() title: string;\n  @Input() url: string;\n\n  problemList: ProblemModel[];\n  columns: any[];\n  data: any[];\n  loading: boolean = true;\n\n  constructor(\n    private snowService: SnowService,\n    private notificationService: NotificationService,\n  ) { }\n\n  ngOnInit() {\n    this.columns = [\n      {\n        name: 'Issue nr',\n        prop: 'dv_number',\n        template: 'id'\n      },\n      {\n        name: 'Priority',\n        prop: 'dv_priority'\n      },\n      {\n        prop: 'dv_problem_state',\n        name: 'Status'\n      },\n      {\n        prop: 'dv_opened_at',\n        name: 'Opened at'\n      },\n      {\n        prop: 'dv_sys_updated_on',\n        name: 'Updated at'\n      },\n      {\n        prop: 'dv_short_description',\n        name: 'Short description'\n      },\n      {\n        prop: 'user.email',\n        name: 'Assigned to',\n        template: 'user'\n      },\n      {\n        prop: 'category',\n        name: 'Category'\n      },\n    ];\n\n    this.getProblems();\n\n    interval(environment.refreshListTime)\n      .subscribe(\n        interval => {\n          this.refreshList();\n        }\n      )\n  }\n\n  getProblems() {\n    this.snowService.getProblems(this.selectedGroup.id)\n      .subscribe(\n        resp => {\n          this.data = resp;\n          this.loading = false;\n        },\n        error => this.loading = false\n      )\n  }\n\n  refreshList() {\n    this.snowService.getProblems(this.selectedGroup.id)\n      .pipe(\n        map(resp => {\n          let originalLength = this.data.length;\n          let newProblems: ProblemModel[] = [];\n          let remainProblems: ProblemModel[] = [];\n\n          resp.forEach(element => {\n            if (!(this.data as ProblemModel[]).find(d => d.sys_id.includes(element.sys_id))) {\n              newProblems.push(element);\n            }\n          });\n\n          (this.data as ProblemModel[]).forEach(data => {\n            if (resp.find(r => r.sys_id.includes(data.sys_id))) {\n              remainProblems.push(data);\n            }\n          });\n          return newProblems.concat(remainProblems);\n        })\n      )\n      .subscribe(\n        resp => {\n          if (resp.length != resp.length) {\n            this.notificationService.notify('New Item', 'There is at least one new problem on the list');\n          }\n          this.data = resp\n        }\n      )\n  }\n}\n","import { PRIORITIES, Priority, ActionTime } from \"@app/list/priority\";\nimport { ProblemModel } from \"@app/shared/swiss-response.model\";\nimport { User } from \"@app/shared/user.model\";\n\nconst status = {\n  inProgress: 'In Progress'\n};\n\nconst OfficeHourEnd = 8;\nconst OfficeHourStart = 16;\n\nexport function mapTimes(model: ProblemModel): ProblemModel {\n  let selectedPriority: Priority\n  PRIORITIES.forEach(priority => {\n    if (model.dv_priority.includes(priority.label)) selectedPriority = priority;\n  });\n  if (selectedPriority) model = applyTime(model, selectedPriority);\n  return model;\n}\n\nexport function applyTime(model: ProblemModel, priority: Priority): ProblemModel {\n  let modelDate = new Date(model.sys_created_on);\n  let modelTime = modelDate.getTime();\n  let action: ActionTime = getActionTimeBasedOnHour(modelDate.getHours(), priority);\n\n  model.counter = getModelCounterTime(model, modelTime, action);\n\n  return model;\n}\n\nfunction getActionTimeBasedOnHour(modelHour: number, priority: Priority): ActionTime {\n  if (modelHour >= OfficeHourEnd || modelHour < OfficeHourStart) {\n    return priority.onCall;\n  } else {\n    return priority.officeTime;\n  }\n}\n\nfunction getModelCounterTime(model: ProblemModel, modelTime: number, actionTime: ActionTime) {\n  if (model.assigned_to !== '') {\n    if (model.dv_incident_state === status.inProgress) {\n      return getCounterTime(modelTime, actionTime.reactionTime + actionTime.resolutionTime);\n    } else {\n      return undefined;\n    }\n  } else {\n    return getCounterTime(modelTime, actionTime.reactionTime);\n  }\n}\n\nfunction getCounterTime(modelTime: number, priorityTime: number): number {\n  return (modelTime + priorityTime) - new Date().getTime();\n}\n\nexport function mapProblemItemUser(model: ProblemModel, users: User[]): ProblemModel {\n  model.user = findUser(model.assigned_to, users);\n  return model;\n}\n\nexport function findUser(id: string, users: User[]): User {\n  const user = users.find(x => {\n    return x.sys_id.includes(id)\n  });\n  return user;\n}\n\nexport function mapIncident(incident: ProblemModel): ProblemModel {\n  incident.dv_problem_state = incident.dv_u_waiting_reason ? `Waiting for ${incident.dv_u_waiting_reason}` : null;\n  return incident;\n}\n","const json = '&JSONv2';\nexport const IncidentQueries = {\n  incident_list_unassigned: (groupId: string) => `incident_list.do?sysparm_query=assignment_group=${groupId}^active=true^incident_state=1^ORincident_state=4^ORincident_state=5^assigned_toISEMPTY${json}`,\n  incident_list: (groupId: string) => `incident_list.do?sysparm_query=assignment_group=${groupId}${json}`\n}\n\nexport const UserQueries = {\n  users: (query: string) => `sys_user_list.do?sysparm_query=sys_idIN${query}^active=true${json}`\n}\n","import { Component, OnInit, Input, ChangeDetectorRef } from '@angular/core';\nimport { Observable, timer } from 'rxjs';\nimport { takeWhile } from 'rxjs/operators';\n\nconst SEC = 1000;\n\n@Component({\n  selector: 'app-counter',\n  template: `\n    <span> {{ _time | timePipe:'hh:mm:ss' }}  </span>\n    <div class=\"progress\" *ngIf=\"_startTime\">\n      <div class=\"progress-bar\" role=\"progressbar\" [style.width]=\"_percent * (100 / _startTime) + '%'\" attr.aria-valuenow=\"{{_percent}}\" aria-valuemin=\"0\" attr.aria-valuemax=\"{{_startTime}}\"></div>\n    </div>\n  `\n})\nexport class CounterComponent implements OnInit {\n\n  _startTime: number;\n  _time: number;\n  _percent: number = 1;\n\n  @Input() public set time(v: number) {\n\n    if (v > 0) {\n      this._time = v;\n    } else {\n      this._time = 0;\n    }\n    this._startTime = this._time;\n    this.count();\n  }\n\n  constructor(\n  ) { }\n\n  ngOnInit() {\n\n  }\n\n  count() {\n    this._time--;\n    timer(0, SEC)\n      .pipe(\n        takeWhile(x => this._time > 0)\n      )\n      .subscribe(\n        t => {\n          this._time--;\n          this._percent++;\n        }\n      )\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe } from '@angular/common';\n\n@Pipe({\n  name: 'timePipe'\n})\n\nexport class TimePipe implements PipeTransform {\n  constructor() {\n\n  }\n  transform(value: any, format): any {\n    if (value < 0) return '00:00:00';\n    let date = new Date(null);\n    date.setSeconds(value); // specify value for SECONDS here\n    return date.toISOString().substr(11, 8);\n  }\n}\n","export function ReadCSV(data, textToReplace = '', mapFunc = null, splitBy = ',') {\n  data = data.replace(/[\\\"\\']/g, \"\").split(/\\r\\n|\\n/)\n    .filter(row => row !== '');\n\n  let headers: string[] = (data as string[])\n    .shift()\n    .split(textToReplace)\n    .join('')\n    .split(splitBy);\n\n  let rows: any[] = (data as string[])\n    .map(row => {\n      let finalObject = {};\n      let element = row.split(splitBy);\n      headers.forEach((header, index) => {\n        finalObject[header] = element[index];\n      });\n      return finalObject;\n    });\n\n  if (!mapFunc) return rows\n\n  return rows.map(mapFunc);\n}\n\n// export function ReadCSV(allText, headersforced = '') {\n\n\n//   var headers;\n//   var allTextLines = allText.replace(/[\\\"\\']/g, \"\").split(/\\r\\n|\\n/);\n//   var startrow = 0;\n\n//   if (headersforced.constructor === Array) {\n//     headers = headersforced;\n//     startrow = 0;\n//   }\n//   else {\n//     headers = allTextLines[0].split(splitBy);\n//     startrow = 1;\n//   }\n\n//   var lines = [];\n\n//   for (var i = startrow; i < allTextLines.length; i++) {\n//     var data = allTextLines[i].replace(\", \", \"&#44;\").split(',', headers.length);\n//     if (data.length == headers.length) {\n//       var tarr = {};\n//       for (var j = 0; j < headers.length; j++) {\n//         tarr[headers[j]] = data[j];\n//       }\n//       lines.push(tarr);\n//     }\n//   }\n//   return lines;\n// }\n","module.exports = \"<div class=\\\"grid-container\\\">\\n    <h3>{{ title }}</h3>\\n\\n    <input type='text' style='padding:8px;margin:15px auto;width:30%;' placeholder='Type to filter the name column...' (keyup)='updateFilter($event)' />\\n\\n    <!-- [selectionType]=\\\"'single'\\\" -->\\n    <!-- [selected]=\\\"grid.selected\\\" -->\\n    <!-- [rowHeight]=\\\"'auto'\\\" -->\\n    <!-- [limit]=\\\"10\\\" -->\\n    <!-- [scrollbarH]=\\\"true\\\"\\n    [scrollbarV]=\\\"true\\\" -->\\n    <ngx-datatable class=\\\"material\\\" [columns]=\\\"grid.columns\\\" [rows]=\\\"grid.rows\\\" [columns]=\\\"columns\\\" [sortType]=\\\"'multi'\\\" [columnMode]=\\\"'force'\\\" [headerHeight]=\\\"50\\\" [footerHeight]=\\\"50\\\" [rowHeight]=\\\"'auto'\\\">\\n\\n        <ng-template #userTemplate let-row=\\\"row\\\" let-value=\\\"value\\\">\\n            <ng-container *ngIf=\\\"row.user\\\">\\n                <p class=\\\"user-name\\\">\\n                    {{ row.user.first_name }} {{ row.user.last_name }}\\n                </p>\\n                <a *ngIf=\\\"row.user.email\\\" href=\\\"mailto:row.user.email\\\">\\n                    <i class=\\\"fa fa-envelope fa-2x\\\"></i>\\n                </a>\\n                <a *ngIf=\\\"row.user.phone\\\" href=\\\"tel:row.user.phone\\\">\\n                    <i class=\\\"fa fa-phone fa-2x\\\"></i>\\n                </a>\\n                <a *ngIf=\\\"row.user.email\\\" href=\\\"skype:row.user.email\\\">\\n                    <i class=\\\"fa fa-skype fa-2x\\\"></i>\\n                </a>\\n            </ng-container>\\n        </ng-template>\\n\\n        <ng-template #id let-row=\\\"row\\\" let-value=\\\"value\\\">\\n            <a target=\\\"_blank\\\" href=\\\"{{snowUrl}}{{url}}sys_id={{value}}\\\">{{ value }}</a>\\n        </ng-template>\\n\\n        <ng-template #timer let-row=\\\"row\\\" let-value=\\\"value\\\">\\n          <!-- {{row | json}} -->\\n          <ng-container *ngIf=\\\"row.dv_incident_state === 'In Progress'  || row.assigned_to == ''\\\">\\n            <app-counter *ngIf=\\\"value\\\" [time]=\\\"value\\\"></app-counter>\\n          </ng-container>\\n        </ng-template>\\n\\n    </ngx-datatable>\\n</div>\\n\"","module.exports = \".grid-container {\\n  margin-top: 20px; }\\n\\n.user-name {\\n  margin-bottom: 2px; }\\n\"","import { Component, OnInit, Input, ViewChild, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { DatatableComponent } from '@swimlane/ngx-datatable';\nimport { GroupModel } from '@app/shared/group.model';\nimport { ProblemModel } from '@app/shared/swiss-response.model';\nimport { environment } from '@environments/environment.prod';\n\n@Component({\n  selector: 'app-grid',\n  templateUrl: './grid.component.html',\n  styleUrls: ['./grid.component.scss']\n})\nexport class GridComponent implements OnInit {\n  snowUrl = environment.snowMainUrl;\n\n  @ViewChild(DatatableComponent) table: DatatableComponent;\n\n  @ViewChild('userTemplate') userTemplate: TemplateRef<any>;\n  @ViewChild('id') idTemplate: TemplateRef<any>;\n  @ViewChild('timer') timerTemplate: TemplateRef<any>;\n\n  @Input() selectedGroup: GroupModel;\n  @Input() queryField: string;\n  @Input() title: string;\n\n  @Input() public set data(v: ProblemModel[]) {\n    this.grid.rows = v;\n    this.grid.temp = v;\n    this.cd.markForCheck();\n  }\n\n  @Input() public set columns(columns: any[]) {\n    columns.forEach(column => {\n      if (column.template) {\n        column.cellTemplate = this.getTemplate(column.template);\n      }\n    })\n    this.grid.columns = columns;\n  }\n\n  grid = {\n    rows: [],\n    columns: [],\n    temp: [],\n    selected: [],\n    limit: 100\n  };\n\n  constructor(\n    private cd: ChangeDetectorRef\n  ) { }\n\n  ngOnInit() {\n  }\n\n  updateFilter(event) {\n    if (!this.queryField) return;\n    const val = event.target.value.toLowerCase();\n    const temp = this.grid.temp.filter((d) => {\n      return d[this.queryField].toLowerCase().indexOf(val) !== -1 || !val;\n    });\n    this.grid.rows = temp;\n    this.table.offset = 0;\n  }\n\n  getRowHeight(row) {\n    if (!row) return 50;\n    if (row.height === undefined) return 50;\n    return row.height;\n  }\n\n  getTemplate(templateString) {\n    if (templateString === 'userTemplate') return this.userTemplate;\n    if (templateString === 'id') return this.idTemplate;\n    if (templateString === 'timer') return this.timerTemplate;\n  }\n}\n","export class GroupModel {\n  name: string;\n  id: string;\n}\n\nexport function getGroups(): GroupModel[] {\n  return [\n    { name: 'Enterprise Backup', id: 'a28be0053760b24cf534f25b34990e71' },\n    {\n      name: 'WINDOWS',\n      id: '7c8f9f630a0a3c2200b0128f428c9f77,dbde230d0a0a8c120171dd1aa14b1b4c'\n    },\n    {\n      name: 'MF',\n      id:\n        '90ea970ba0eb41046011b52dcd85e091,000e170fa0eb41046011b52dcd85e0c0,e059d307a0eb41046011b52dcd85e0bd,2c19561da90f514460119afd710b2041,f3daad26a0638dc06011b52dcd85e09f,53b515e6a0af4dc06011b52dcd85e02f,227fa6870a0a3c2c0184d039d848ee83'\n    },\n    // { name: 'DB2', id: '116dc6900a0a3c1900b7e3e85c78a561' },\n    // {\n    //   name: 'EBM',\n    //   id:\n    //     '51a6226c24b189c060112ae3808c0d77,7397291789863880cf32c46d16c1942a,7c510d466f420a40dd8955ff8d3ee40c'\n    // },\n    // {\n    //   name: 'ECM',\n    //   id: '116dc84b0a0a3c19019668664a0eedde,dbdd3f410a0a8c1200fdd77955bc1a37'\n    // },\n    // {\n    //   name: 'IIE',\n    //   id:\n    //     'dadc74f20a0a8c1201b299b4685a1e64,dbd3d9080a0a8c1200ef42a316e66916,daa446790a0a8c1201af6691d1d548cf,e781a58b11ddd4009d004bf6b4a1bf7f,f1610932370d724448ca44e654990e94,8b8479183779ee00524144e654990e56'\n    // },\n    // {\n    //   name: 'MIDDLEWARE',\n    //   id: '116cf2bc0a0a3c19018c8b8c999c077b,dada16330a0a8c120165f2bc074f5a4f'\n    // },\n    // {\n    //   name: 'OCC CENTRAL',\n    //   id:\n    //     'c2717a690a0a3c2c01c31ec314f985d1,116d073c0a0a3c1900a4d1d229430b99,be33e68ea91049009dc76bd33f617728,dad73aa80a0a8c1201dbf823d8c8eee3,dad793f40a0a8c120098bf4573d9b473'\n    // },\n    // { name: 'OCC DECENTRAL', id: 'f8fd858b0a0a3c1901547377eb988821' },\n    // {\n    //   name: 'ORACLE',\n    //   id: '116dee240a0a3c19012c711d2da1ae3f,daa2c44a0a0a8c12004f100acbd44ef4'\n    // },\n    // {\n    //   name: 'UNIX',\n    //   id: '116df3660a0a3c1900316ad097c5df2a,dbd5ffeb0a0a8c1200e2c7590f3a4b84'\n    // },\n\n    // { name: 'DB2 L3', id: '98329d9437380b00a8b9f25b34990efb' },\n    // { name: 'IaaS Technical Support', id: '7d91b9b0e835f100ed05f98a5dcdc208' },\n    // { name: 'IaaS L2 Support', id: 'a8320a996f2e8a40870f4c992e3ee4ab' },\n    // { name: 'EBM Engineering', id: '0fb4f9a8e16ac9c06008e9f9296ce867' },\n    // {\n    //   name: 'PaaS Java Expert Support',\n    //   id: 'dee435b4e835f100ed05f98a5dcdc29c'\n    // },\n    // {\n    //   name: 'Cloud Application Migration',\n    //   id: 'e3b36f0f3759be88d2ee44e654990e34'\n    // },\n    // { name: 'zOS Storage Services L2', id: '42172daea0238dc06011b52dcd85e07d' },\n    // {\n    //   name: 'Automation Orchestration Service',\n    //   id: '27a6cb8f990b9d80dd57fe5f8fd50338'\n    // },\n    // { name: 'CH_TECH OFFICE', id: '116d08680a0a3c190045c0e3668a4c1e' },\n  ];\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class NotificationService {\n\n  constructor() { }\n\n  requestPermission() {\n    Notification.requestPermission().then((result) => {\n      console.log(result);\n    });\n  }\n\n  notify(text: string, body: string) {\n    if (!(\"Notification\" in window)) {\n      alert(\"This browser does not support system notifications\");\n    }\n\n    // Let's check whether notification permissions have already been granted\n    else if (Notification['permission'] === \"granted\") {\n      this.createNotification(text, body);\n    }\n    else if (Notification['permission'] !== 'denied') {\n      Notification.requestPermission((permission) => {\n        if (permission === \"granted\") {\n          this.createNotification(text, body);\n        }\n      });\n    }\n  }\n\n  private createNotification(text: string, body: string) {\n    let options = {\n      body: body,\n      icon: ''\n    }\n\n    let notification = new Notification(text, options);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule, DatePipe } from '@angular/common';\n\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\nimport { SnowService } from './snow.service';\nimport { NotificationService } from '@app/shared/notification.service';\nimport { GridComponent } from './grid/grid.component';\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\nimport { CounterComponent } from '@app/shared/counter/counter.component';\nimport { TimePipe } from '@app/shared/counter/time.pipe';\n\nconst components = [\n  CounterComponent,\n  GridComponent,\n  TimePipe\n]\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NgxDatatableModule,\n    HttpClientModule,\n  ],\n  declarations: [\n    ...components\n  ],\n  providers: [\n    HttpClient,\n    NotificationService,\n    SnowService\n  ],\n  exports: [\n    ...components\n  ]\n})\nexport class SharedModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '@environments/environment';\nimport { SwissResponseModel, ProblemModel } from '@app/shared/swiss-response.model';\nimport { Observable } from 'rxjs';\n\nimport { map, mapTo } from 'rxjs/operators';\nimport { User, UserList, UserGroup, UserGroupList } from '@app/shared/user.model';\nimport { ReadCSV } from '@app/shared/csv-parser';\nimport { PRIORITIES, Priority } from '@app/list/priority';\nimport { mapProblemItemUser, mapTimes, mapIncident } from '@app/list/problem-transformation';\nimport { IncidentQueries, UserQueries } from '@app/list/queries';\nimport { isNullOrUndefined } from '@swimlane/ngx-datatable/release/utils';\n\n@Injectable()\nexport class SnowService {\n  public users: User[] = [];\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  getProblems(id: string): Observable<ProblemModel[]> {\n\n    if (environment.production) {\n      return this.getProblemList(id);\n    } else {\n      return this.getMockData();\n    }\n\n  }\n\n  getIncidents(id: string, url: string = ''): Observable<ProblemModel[]> {\n    if (isNullOrUndefined(url) || url === '') url = IncidentQueries.incident_list(id);\n    if (environment.production) {\n      return this.getIncidentList(id, url);\n    } else {\n      return this.getMockData();\n    }\n  }\n\n  getUsers(groupIds: string): Observable<User[]> {\n    return this.http.get<UserList>(`${environment.snowMainUrl}${UserQueries.users(groupIds)}`)\n      .pipe(\n        map(list => list.records)\n      );\n  }\n\n  getUsersByGroups(query: string = ''): Observable<User[]> {\n    if (environment.production) {\n      let queryParams = 'user.first_name,user.last_name,user.email,user.sys_id,user.phone';\n      return this.http.get(`${environment.snowMainUrl}sys_user_grmember_list.do?sysparm_fields=${queryParams}&sysparm_query=groupIN${query}&CSV`, { responseType: 'text' })\n        .pipe(\n          map(this.mapUserResponse)\n        );\n    } else {\n      return this.http.get('assets/users.csv', { responseType: 'text' })\n        .pipe(\n          map(this.mapUserResponse)\n        )\n    }\n  }\n\n  private mapUserResponse(resp) {\n    let users: User[] = ReadCSV(resp, 'user.');\n    let uniqueId: string[] = Array.from(new Set(users.map(user => user.sys_id)));\n    let uniqueUsers: User[] = [];\n    users.forEach(user => {\n      if (!uniqueUsers.find(uniqueUser => uniqueUser.sys_id === user.sys_id)) uniqueUsers.push(user);\n    })\n    return uniqueUsers\n  }\n\n  private getMockData(): Observable<ProblemModel[]> {\n    return this.http.get<SwissResponseModel>(`assets/response.model.json`)\n      .pipe(\n        map(response => response.records),\n        map((problems: ProblemModel[]) =>\n          problems\n            .map(problem => mapProblemItemUser(problem, this.users))\n            .map(problem => mapTimes(problem))\n        )\n      );\n  }\n\n  private getIncidentList(id: string, url: string): Observable<ProblemModel[]> {\n    return this.http.get<SwissResponseModel>(`${environment.snowMainUrl}${url}`)\n      .pipe(\n        map(response => response.records),\n        map((incidents: ProblemModel[]) =>\n          incidents\n            .map(problem => mapProblemItemUser(problem, this.users))\n            .map(problem => mapIncident(problem))\n            .map(problem => mapTimes(problem))\n        ),\n    )\n  }\n\n  private getProblemList(id): Observable<ProblemModel[]> {\n    return this.http.get<SwissResponseModel>(`${environment.snowMainUrl}${environment.problemList}?sysparm_query=assignment_groupIN${id}^problem_stateIN1,2,5^ORDERBYsys_updated_on^ORDERBYassigned_to&sysparm_first_row=1&JSONv2&sysparm_action=getRecords&displayvalue=all`)\n      .pipe(\n        map(response => response.records),\n        map((problems: ProblemModel[]) =>\n          problems\n            .map(problem => mapProblemItemUser(problem, this.users))\n        )\n      );\n  }\n}\n","export const environment = {\n  production: true,\n  snowMainUrl: 'https://swissre.service-now.com/',\n  problemList: 'problem_list.do',\n  incidentList: 'incident_list.do',\n  deploymentTask: 'u_deployment_task_list.do',\n  refreshListTime: 2 * 60 * 1000\n};\n","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false,\n  snowMainUrl: 'https://swissre.service-now.com/',\n  problemList: 'problem_list.do',\n  incidentList: 'incident_list.do',\n  deploymentTask: 'u_deployment_task_list.do',\n  refreshListTime: 2 * 60 * 1000\n};\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}